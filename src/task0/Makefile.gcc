#
# Builds task0 which functions as the kernel.
#

SRCDIR       = ..

CSRCS        = $(wildcard *.c) 
CSRCS       += $(wildcard $(SRCDIR)/hardware/peripherals/*.c) 
CSRCS       += $(wildcard $(SRCDIR)/kernel/*.c)
CSRCS       += $(wildcard $(SRCDIR)/tasks/*.c)

ASMSRCS      = $(wildcard *.S)
ASMSRCS     += $(wildcard $(SRCDIR)/hardware/peripherals/*.S)
ASMSRCS     += $(wildcard $(SRCDIR)/kernel/*.S)
ASMSRCS     += $(wildcard $(SRCDIR)/tasks/*.S)

COBJS        = $(CSRCS:.c=.o)
ASMOBJS      = $(ASMSRCS:.S=.o)

CFLAGS       = -Wall -O2 -fno-stack-protector -nodefaultlibs -nostartfiles 
CFLAGS      += -ffreestanding -nostdinc -nostdlib -nostartfiles -fpie

CINCLUDES    = -I "." 
CINCLUDES   += -I "$(SRCDIR)/hardware" 
CINCLUDES   += -I "$(SRCDIR)/hardware/peripherals" 
CINCLUDES   += -I "$(SRCDIR)/kernel"
CINCLUDES   += -I "$(SRCDIR)/tasks"

OBJDUMPFLGS  = --disassemble --file-headers --section-headers 

#######################################################################
# Targets
#######################################################################

all: task0.img

task0.img: $(COBJS) $(ASMOBJS)
#-E option to ld exports the symbols as dynamic symbols.
	aarch64-elf-ld -nostdlib -nostartfiles $(ASMOBJS) $(COBJS) -T link.ld -o task0.elf
	aarch64-elf-objcopy -O binary task0.elf task0.img

%.o: %.c
	aarch64-elf-gcc $(CFLAGS) $(CINCLUDES) -c $< -o $@

%.o: %.S
	aarch64-elf-gcc $(CFLAGS) $(CINCLUDES) -c $< -o $@

clean:
	-rm -f task0.elf
	-rm -f task0.img
	-rm -f *.o
	$(MAKE) -f Makefile.gcc -C $(SRCDIR)/kernel clean

objdump:
	aarch64-elf-objdump $(OBJDUMPFLGS) task0.elf > $(SRCDIR)/../debug/task0.lst
