#
# Builds the startup stub that gets loaded by the hardware to 0x00080000
#

SRCDIR       = ../

CSRCS        = $(wildcard *.c) 
CSRCS       += $(wildcard $(SRCDIR)/hardware/peripherals/*.c)
CSRCS       += $(wildcard $(SRCDIR)/kernel/*.c)
CSRCS       += $(wildcard $(SRCDIR)/tasks/*.c)

ASMSRCS      = $(wildcard *.S)
ASMSRCS     += $(wildcard $(SRCDIR)/hardware/peripherals/*.S)
ASMSRCS     += $(wildcard $(SRCDIR)/kernel/*.S)
ASMSRCS     += $(wildcard $(SRCDIR)/tasks/*.S)

COBJS        = $(CSRCS:.c=.o)
ASMOBJS      = $(ASMSRCS:.S=.o)

CFLAGS       = -Wall -O2 -fno-stack-protector -nodefaultlibs -nostartfiles 
CFLAGS      += -ffreestanding -nostdinc -nostdlib -nostartfiles

CINCLUDES    = -I "." 
CINCLUDES   += -I "$(SRCDIR)/hardware" 
CINCLUDES   += -I "$(SRCDIR)/hardware/peripherals" 
CINCLUDES   += -I "$(SRCDIR)/kernel"
CINCLUDES   += -I "$(SRCDIR)/tasks"

OBJDUMPFLGS  = --disassemble --file-headers --section-headers 

#######################################################################
# Targets
#######################################################################

all: startup.img

startup.img: $(COBJS) $(ASMOBJS)
	aarch64-elf-ld -nostdlib -nostartfiles $(ASMOBJS) $(COBJS) -T link.ld -o startup.elf
	aarch64-elf-objcopy -O binary startup.elf startup.img

%.o: %.c
	aarch64-elf-gcc $(CFLAGS) $(CINCLUDES) -c $< -o $@

%.o: %.S
	aarch64-elf-gcc $(CFLAGS) -c $< -o $@

objdump: startup.img
	aarch64-elf-objdump $(OBJDUMPFLGS) startup.elf > $(SRCDIR)/../debug/startup.lst

clean:
	-rm -f *.o
	-rm -f startup.elf
	-rm -f startup.img

#######################################################################
# Experimental Targets
#######################################################################

#
#Uses docker container from:
# https://github.com/rust-embedded/rust-raspi3-OS-tutorials
# Provided by Andre Richter <andre.o.richter@gmail.com>
#
CONTAINER_UTILS   = andrerichter/raspi3-utils

DOCKER_CMD        = docker run -p 1234:1234 -it --rm
DOCKER_ARG_CURDIR = -v $(shell pwd):/work -w /work
DOCKER_ARG_TTY    = --privileged -v /dev:/dev
DOCKER_EXEC_QEMU  = qemu-system-aarch64 -s -S -M raspi3 -kernel startup.img

qemu:
	$(DOCKER_CMD) $(DOCKER_ARG_CURDIR) $(CONTAINER_UTILS) \
	$(DOCKER_EXEC_QEMU) -serial stdio
